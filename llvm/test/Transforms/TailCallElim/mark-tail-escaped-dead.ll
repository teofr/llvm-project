; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -passes=tailcallelim -verify-dom-info -S | FileCheck %s

; This test checks that a call is marked tail even if there ara escaped
; variables as long as they are not alive

; IR for that test was generated from the following C++ source:
;
; void capture(int&);
; int bar(void);
;
; int foo(void) {
;     {
;         int i;
;         capture(i);
;     }
;     return bar();
; }


define dso_local noundef i32 @_Z3foov() local_unnamed_addr {
; CHECK-LABEL: @_Z3foov(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[I:%.*]] = alloca i32, align 4
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 4, ptr nonnull [[I]])
; CHECK-NEXT:    call void @_Z7captureRi(ptr noundef nonnull align 4 dereferenceable(4) [[I]])
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 4, ptr nonnull [[I]])
; CHECK-NEXT:    [[CALL:%.*]] = tail call noundef i32 @_Z3barv()
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %i = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %i) #4
  call void @_Z7captureRi(ptr noundef nonnull align 4 dereferenceable(4) %i)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %i) #4
  %call = call noundef i32 @_Z3barv()
  ret i32 %call
}

declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

declare void @_Z7captureRi(ptr noundef nonnull align 4 dereferenceable(4)) local_unnamed_addr #2

declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

declare noundef i32 @_Z3barv() local_unnamed_addr #2

declare void @llvm.dbg.assign(metadata, metadata, metadata, metadata, metadata, metadata) #3

!18 = distinct !DIAssignID()
